#!/bin/bash

set -Eeu
trap 'cleanup 130' INT
trap 'cleanup 143' TERM
trap 'cleanup $?' EXIT

cleanup() {
    trap - INT TERM EXIT  # avoid reexecuting handlers
    if [ "$1" = 130 ]; then
        kill -INT $$
    elif [ "$1" = 143 ]; then
        kill -TERM $$
    else
        exit "$1"
    fi
}

script_dir=$(cd "$(dirname "${0}")" &>/dev/null && pwd -P)

usage () {
  cat <<EOF # remove the space between << and EOF, this is due to web plugin issue
Usage: $(basename "${0}") [-h] [-v] [-f] -p param_value arg1 [arg2...]

Script description here.

Available options:

-h, --help      Print this help and exit
-v, --verbose   Print script debug info
-f, --flag      Some flag description
EOF
  exit
}

setup_colors () {
  if [ -t 2 ] && [ -z "${NO_COLOR-}" ] && [ "${TERM-}" != "dumb" ]; then
    NOFORMAT='\033[0m'
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    ORANGE='\033[0;33m'
    BLUE='\033[0;34m'
    PURPLE='\033[0;35m'
    CYAN='\033[0;36m'
    YELLOW='\033[1;33m'
  else
    NOFORMAT=''
    RED=''
    GREEN=''
    ORANGE=''
    BLUE=''
    PURPLE=''
    CYAN=''
    YELLOW=''
  fi
}

msg () {
  echo "${1-}" >&2
}

secction_div () {
  COLS=$(tput cols)
  printf -- '=%.0s' $(seq $COLS) >&2
}

sub_secction_div () {
  COLS=$(tput cols)
  printf -- '-%.0s' $(seq $COLS) >&2
}

die () {
  msg=$1
  code=${2-1} # default exit status 1
  msg "$msg"
  exit "$code"
}

parse_params () {
  # default values of variables set from params
  while :; do
    case "${1-}" in
    -h | --help) usage ;;
    -v | --verbose) set -x ;;
    --no-color) NO_COLOR=1 ;;
    -?*) die "Unknown option: $1" 2;;
    *) break ;;
    esac
    shift
  done

  args=${@}

  return 0
}

menu_from_array ()
{
  select item; do
  # Check the selected menu item number
  if [ 1 -le "$REPLY" ] && [ "$REPLY" -le $# ];
  then
    echo "$item"
    break;
  else
    #echo "Wrong selection: Select any number from 1-$#"
    echo ""
  fi
  done
}

parse_params "$@"
setup_colors

i_need_sudo () {
  msg "I need SUDO"
  sudo echo "thanks"
  return 0
}

install () {
  i_need_sudo
  if [ -x "$(command -v apt)" ]; then
    sudo apt update
    sudo apt install -y $@
  elif [ -x "$(command -v apt-get)" ]; then
    sudo apt-get install $@
  elif [ -x "$(command -v yum)" ]; then
    sudo yum install $@
  elif [ -x "$(command -v pacman)" ]; then
    sudo pacman -Syu $@
  else
    die "Unsupported package manager"
  fi
  return 0
}

setup_config () {
  url="${1:-https://github.com/alograg/dotfiles.git}"
  if ! command -v git >/dev/null 2>&1 ; then
    msg "GIT requiered"
    install git
  fi
  # Configuracion de respaldo de configuracion
  if [ "$(type -t config)" = "" ]; then
    config() {
      /usr/bin/git --git-dir=$HOME/.dotfiles/ --work-tree="$HOME" $@
    }
  fi

  if [ ! -d $HOME/.dotfiles ] ; then
    git clone --depth=1 --bare $url $HOME/.dotfiles
    config checkout -f
    config config status.showUntrackedFiles no
  fi
  return 0
}

setup_git () {
  if ! command -v curl >/dev/null 2>&1 ; then
    msg "cURL requiered"
    install curl
  fi
  if ! command -v git >/dev/null 2>&1 ; then
    msg "Installing GIT"
    install git
  fi
  # Configuracion de git
  [ -f $HOME/.gitattributes ] || curl https://raw.githubusercontent.com/alograg/dotfiles/master/.gitattributes -o $HOME/.gitattributes
  echo -n -e "Change the user and git mail? (y/\e[4mn\e[0m)"
  read -p ": " yn
  if [ "$yn" = "y" ]; then
    git config --global user.name "$USER"
    read -p "Enter your git email [$USER@exemple.com]: " correo
    correo=${correo:-"$USER@exemple.com"}
    git config --global user.email "$correo"
  fi
  return 0
}

setup_dev_tools () {
  install \
    bc \
    build-essential \
    cmake \
    gettext \
    golang \
    ninja-build \
    software-properties-common
  return 0
}

setup_vifm () {
  if ! command -v vifm >/dev/null 2>&1 ; then
    install vifm
  fi
  if ! command -v git >/dev/null 2>&1 ; then
    msg "GIT requiered"
    install git
  fi
  setup_dev_tools
  install \
    fuseiso \
    p7zip-full \
    p7zip-rar \
    libarchive-dev \
    libfuse-dev \
    sshfs \
    unzip
  git clone --depth=1 https://github.com/google/fuse-archive.git
  cd fuse-archive || exit
  sudo make install
  cd ..
  sudo rm -fR fuse-archive
  return 0
}

setup_neovim () {
  return 0
  if ! command -v curl >/dev/null 2>&1 ; then
    msg "cURL requiered"
    install cURL
  fi
  [ ! -d $HOME/.local/bin ] || mkdir -p $HOME/.local/bin
  curl -L https://github.com/neovim/neovim/releases/latest/download/nvim.appimage -o $HOME/.local/bin/nvim.appimage
  chmod u+x $HOME/.local/bin/nvim.appimage
  cd $HOME/.local/bin/
  ln -s $HOME/.local/bin/nvim.appimage vi
  return 0
}

setup_gdrive () {
  if ! command -v curl >/dev/null 2>&1 ; then
    msg "cURL requiered"
    install cURL
  fi
  [ ! -d $HOME/.local/bin ] || mkdir -p $HOME/.local/bin
  curl -L https://github.com/glotlabs/gdrive/releases/download/latest/gdrive_linux-x64.tar.gz -o $HOME/.local/bin/gdrive.tar.gz
  cd $HOME/.local/bin/
  tar -xzvf gdrive.tar.gz
  rm gdrive.tar.gz
  return 0
}

setup_suckless () {
  install build-essential libx11-dev libxft-dev libxinerama-dev libfreetype6-dev libfontconfig1-dev xorg
  sudo apt purge gnome-shell-*
  setup_dwm_rebuild 
  if [ ! -f $HOME/.xinitrc ]; then
    echo "$(which dwm)" >> $HOME/.xinitrc
  fi
  return 0
}

setup_dwm_rebuild () {
  sucklessApps=('dwm' 'st' 'dmenu')
  for appSuckless in "${sucklessApps[@]}"
    do
      cd ~/.sources/$appSuckless
      sudo make clean install
    done
  cd ~
  return 0
}

setup_nix () {
  if [ ! -d /nix] ; then
    sh <(curl -L https://nixos.org/nix/install) --daemon
  fi
}

run_setup () {
  case $1 in
    "config")
      setup_config
    ;;
    "git")
      setup_git
    ;;
    "dev_tools")
      setup_dev_tools
    ;;
    "vifm")
      setup_vifm
    ;;
    "neovim")
      setup_neovim
    ;;
    "dwm")
      setup_suckless
    ;;
    "rebuildDwm")
     setup_dwm_rebuild
    ;;
    "setup_gdrive")
      setup_gdrive
    ;;
    "setup_nix")
      setup_nix
    ;;
    "all")
      setup_git
      setup_config
      setup_dev_tools
      setup_vifm
      setup_neovim
      setup_suckless 
      setup_gdrive
      setup_nix 
    ;;
  esac
}

if [ ${#args} -eq 0 ] ; then
  PS3="Setup what?: "
  option="$(menu_from_array config git dev_tools vifm neovim dwm rebuildDwm all)"
  run_setup "$option"
else
  run_setup "${args[0]}"
fi
